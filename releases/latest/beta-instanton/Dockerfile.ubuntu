ARG CRIU_BUILD_BASE_IMAGE=ubuntu:22.04
ARG OPENJ9_BUILD_BASE_IMAGE=ubuntu:22.04
ARG LIBERTY_BUILD_BASE_IMAGE=ubuntu:22.04
ARG FINAL_BASE_IMAGE=ubuntu:22.04

#
# criu-build
#

FROM ${CRIU_BUILD_BASE_IMAGE} as criu-build
ARG CRIU_REPO=https://github.com/checkpoint-restore/criu.git
ARG CRIU_BRANCH=criu-dev
ARG CRIU_DEBUG=1

WORKDIR /criu-src

RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -y --no-install-recommends ca-certificates git build-essential pkg-config libbsd-dev libnftables-dev libprotobuf-dev libprotobuf-c-dev protobuf-c-compiler protobuf-compiler python3-protobuf pypy-ipaddress iproute2 libcap-dev libnl-3-dev libnet-dev libaio-dev python3-future python3-distutils asciidoc xmlto \
    && rm -rf /var/lib/apt/lists/*

RUN [ ! -e ./Makefile ] && git clone --branch "${CRIU_BRANCH}" "${CRIU_REPO}" .

RUN make DEBUG=${CRIU_DEBUG} DESTDIR=/criu-install PREFIX=/usr install

#
# openj9-build
#

FROM ${OPENJ9_BUILD_BASE_IMAGE} as openj9-build
ARG OPENJ9_OPENJDK_REPO=https://github.com/ibmruntimes/openj9-openjdk-jdk11.git
ARG OPENJ9_OPENJDK_BRANCH=openj9
ARG OPENJ9_BUILD_JDK=openjdk-11-jdk

WORKDIR /openj9-src

COPY --from=criu-build /criu-install /

RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -y --no-install-recommends ${OPENJ9_BUILD_JDK} autoconf ca-certificates cmake coreutils cpio file gcc g++ git libasound2-dev libcups2-dev libdwarf-dev libelf-dev libfontconfig1-dev libfreetype6-dev libnuma-dev libssl-dev libx11-dev libxext-dev libxrender-dev libxrandr-dev libxt-dev libxtst-dev make nasm pkg-config ssh unzip wget zip libprotobuf-c-dev \
    && rm -rf /var/lib/apt/lists/*

RUN [ ! -e ./configure ] \
    && git clone --branch "${OPENJ9_OPENJDK_BRANCH}" "${OPENJ9_OPENJDK_REPO}" . \
    && sh get_source.sh

RUN . /etc/os-release \
    && conf="openj9-build-${ID}-${VERSION_ID}-$(dpkg --print-architecture)" \
    && sh configure --with-conf-name=${conf} --enable-criu-support --disable-ddr \
    && make images

RUN mkdir -p /opt/java \
    && cp -vr build/openj9-build-*-*-*/images/jdk /opt/java/openjdk

#
# liberty-build
#

FROM ${LIBERTY_BUILD_BASE_IMAGE} as liberty-build
ARG LIBERTY_REPO=https://github.com/OpenLiberty/open-liberty.git
ARG LIBERTY_BRANCH=integration
ARG LIBERTY_BUILD_JDK=openjdk-11-jdk
ARG OPENJ9_SCC=false
ARG VERBOSE=true

WORKDIR /liberty-src

RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -y --no-install-recommends ${LIBERTY_BUILD_JDK} git \
    && rm -rf /var/lib/apt/lists/*

RUN [ ! -e dev ] && git clone --branch "${LIBERTY_BRANCH}" "${LIBERTY_REPO}" .

WORKDIR /liberty-src/dev

RUN ./gradlew cnf:initialize

RUN ./gradlew assemble

RUN mkdir -p /opt/ol \
    && cp -vr build.image/wlp /opt/ol/

#
# Final image
#

FROM ${FINAL_BASE_IMAGE}
ARG OPENJ9_SCC=false
ARG VERBOSE=true

WORKDIR /

COPY --from=criu-build /criu-install /
COPY --from=openj9-build /opt/java/openjdk /opt/java/openjdk
COPY --from=liberty-build /opt/ol/wlp /opt/ol/wlp

RUN export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -y --no-install-recommends libbsd0 libnftables-dev libprotobuf-c-dev libnl-3-dev libnet1 libcap2-bin dumb-init \
    && rm -rf /var/lib/apt/lists/*

RUN setcap cap_checkpoint_restore,cap_net_admin,cap_sys_ptrace=eip /usr/sbin/criu

#
# The following was copied from Dockerfile.ubi.openjdk17:
#

COPY NOTICES /opt/NOTICES
COPY helpers /opt/ol/helpers
COPY fixes/ /opt/ol/fixes/

ENV PATH=/opt/java/openjdk/bin:/opt/ol/wlp/bin:/opt/ol/docker/:/opt/ol/helpers/build:$PATH \
    LOG_DIR=/logs \
    WLP_OUTPUT_DIR=/opt/ol/wlp/output \
    WLP_SKIP_MAXPERMSIZE=true \
    OPENJ9_SCC=$OPENJ9_SCC \
    WLP_IN_CONTAINER=true

RUN /opt/ol/wlp/bin/server create --template=javaee8 \
    && rm -rf $WLP_OUTPUT_DIR/.classCache /output/workarea

# Create symlinks && set permissions for non-root user
RUN mkdir /logs \
    && mkdir -p /opt/ol/wlp/usr/shared/resources/lib.index.cache \
    && ln -s /opt/ol/wlp/usr/shared/resources/lib.index.cache /lib.index.cache \
    && mkdir -p $WLP_OUTPUT_DIR/defaultServer \
    && ln -s $WLP_OUTPUT_DIR/defaultServer /output \
    && ln -s /opt/ol/wlp/usr/servers/defaultServer /config \
    && mkdir -p /config/configDropins/defaults \
    && mkdir -p /config/configDropins/overrides \
    && mkdir -p /config/dropins \
    && mkdir -p /config/apps \
    && ln -s /opt/ol/wlp /liberty \
    && chown -R 1001:0 /config \
    && chmod -R g+rw /config \
    && chown -R 1001:0 /logs \
    && chmod -R g+rw /logs \
    && chown -R 1001:0 /opt/ol/wlp/usr \
    && chmod -R g+rw /opt/ol/wlp/usr \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rw /opt/ol/wlp/output \
    && chown -R 1001:0 /opt/ol/helpers \
    && chmod -R g+rw /opt/ol/helpers \
    && chown -R 1001:0 /opt/ol/fixes \
    && chmod -R g+rwx /opt/ol/fixes \
    && mkdir /etc/wlp \
    && chown -R 1001:0 /etc/wlp \
    && chmod -R g+rw /etc/wlp \
    && echo "<server description=\"Default Server\"><httpEndpoint id=\"defaultHttpEndpoint\" host=\"*\" /></server>" > /config/configDropins/defaults/open-default-port.xml \
    && echo "<server><featureManager><feature>checkpoint-1.0</feature></featureManager></server>" > /config/configDropins/defaults/checkpoint.xml

# Create a new SCC layer
RUN if [ ! -d "/opt/java/.scc" ]; then mkdir /opt/java/.scc; chmod -R 0777 /opt/java/.scc; fi \
    && if [ "$OPENJ9_SCC" = "true" ]; then populate_scc.sh; fi \
    && rm -rf /output/messaging /output/resources/security /logs/* $WLP_OUTPUT_DIR/.classCache \
    && chown -R 1001:0 /opt/ol/wlp/output \
    && chmod -R g+rwx /opt/ol/wlp/output

#These settings are needed so that we can run as a different user than 1001 after server warmup
ENV RANDFILE=/tmp/.rnd \
    OPENJ9_JAVA_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal -Dosgi.checkConfiguration=false"

USER 1001

EXPOSE 9080 9443

ENTRYPOINT ["/opt/ol/helpers/runtime/docker-server.sh"]
CMD ["/opt/ol/wlp/bin/server", "run", "defaultServer"]
